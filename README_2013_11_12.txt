##############
Implementation
##############

---------------------
Algorithm description
----------------------

- Two algorithms are used by the tool: A mean-and-standard deviation-based approach(we construct a threshold as the mean plus
or minus a constant times the standard deviation, where the constant is a parameter) and a percentile method. Portions of the
assembly with coverage that are either above or below the threshold, or that lie within a particular percentile are flagged as 
misassemblies. 

- Tuneable parameters of our algorithms include the window length and step size. Note that bucketing is a special case of
a windowed approach, where the step size equals the window length.

---------------------
Description of output
---------------------

- The tool produces output in four forms:
	(a) At the base-pair level (an assembly-length binary vector where each element indicates whether the corresponding base-pair is part of a repeat or not)
	(b) At the window level (same, but at a windowed level)
	(c) At the region level (textual output, which give the exact regions of the repeats)
	(d) We also output a graphical representation of coverage.
	
- The formats (a) and (b) were chosen because they are easy to compare against oracles and (c), (d) are easy for humans to digest.

###################
How to run the tool
###################

An example run of the tool is the following: First, change to the directory "assembly-read-coverage/org/umd/assemblytest/readcoverage/". Then,
run 

python clipper.py -a ../../../../../data/influenza-A/influenza-A.assembly.fasta -r ../../../../../data/influenza-A/influenza-A.sequences.fasta -w 20 -s 1 -t Gaussian -p 2.0 

This will read the influenza-A assembly and sequences FASTA files, print some useful statistics and generate some intermediate files in the directory 
"assembly-read-coverage/org/umd/assemblytest/readcoverage/out".  For more information, consult the output of python clipper.py -h:

usage: clipper.py [-h] -a ASSEMBLY_FASTA -r READS_FASTA [-w WIN_LEN]
                  [-s WIN_STEP] -t TEST_TYPE -p TEST_PARAM [-o OUT_DIR]

Detects assembly regions of extreme coverage

optional arguments:
  -h, --help            show this help message and exit
  -a ASSEMBLY_FASTA, --assembly ASSEMBLY_FASTA
                        Assembly file in FASTA format
  -r READS_FASTA, --reads READS_FASTA
                        Read sequences file in FASTA format
  -w WIN_LEN, --window_length WIN_LEN
                        Sliding window length (integer)
  -s WIN_STEP, --window_slide_step WIN_STEP
                        Window sliding step (integer)
  -t TEST_TYPE, --test_type TEST_TYPE
                        Statistical test type used to determine extreme
                        coverage; can be either Gaussian or Percentile
  -p TEST_PARAM, --test_param TEST_PARAM
                        Statistical test parameter (float)
  -o OUT_DIR, --output_dir OUT_DIR
                        Output file directory

						
#########
Testcases
#########

- To run the testcases, run the scripts run_tests.sh and run_influenza_test.sh. The following are characteristics of our
test cases:

    # test 1: no duplicates
    # novelty: no duplicates
    # how we generated it: 4 contigs each of length 500bp
	
	# test 2: small duplicate
    # novelty: has small segment with single duplicate, our method should detect this.
    # how we generated it: 4 contigs each of length 500bp, in contig 1, base pairs 100-120 are repeated.
	
	# test 3: big duplicate
    # novelty: has big segment with single duplicate, our method should also detect large duplicates.
    # how we generated it: 4 contigs each of length 500bp, in contig 1, base pairs 100-300 are repeated.
	
	# test 4: multiple small duplicates, far apart
    # novelty: Multiple duplicates. Our method should be capable of finding more than single duplicates.
    # how we generated it: 4 contigs each of length 500bp, in contig 1, base pairs 50-75 and 450-475 are repeated.
	
	# test 5: multiple small duplicates, close together
    # novelty: Multiple duplicates, with close proximity. Our method should detect duplicates even when close together.
    # how we generated it: 4 contigs each of length 500bp, in contig 1, base pairs 50-75 and 85-110 are repeated.
	
	# testcase_fails: same as test 3, but we force it to fail by using inopportune parameters for the given FASTA files
	
	# testcase_influenza: We have no oracle here, but we run it as well to demonstrate results on a more realistic assembly.
	
##############
Directory refs
##############

- Assembly and sequences FASTA files for the Influenza-A virus can be found at data/influenza-A.
- Assembly and sequences FASTA files, as well as oracle files that we generated can be found at 
  "assembly-read-coverage-test/test/org/umd/assemblytest/readcoverage/testcases/"
		
#################
Code dependencies
#################

- To run the tool, you will need bowtie2 (http://bowtie-bio.sourceforge.net/bowtie2/index.shtml) and Python >= 2.7 with NumPy and matplotlib.